using UnityEditor.Animations;
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

using UnityEditor;
namespace BS.Editor
{
    /// <summary>
    /// AnimatorController 에셋이 추가/수정될 때 자동으로 AnimParamConstants.cs에 파라미터 상수를 생성하는 에디터 툴
    /// </summary>
    public class AnimatorParameterConstantsGenerator : AssetPostprocessor
    {
      private const string ANIM_PARAM_CONSTANTS_FILE_PATH = "Assets/Scripts/AnimParamConstants.cs";

        /// <summary>
  /// 에셋이 임포트될 때 호출되는 콜백
  /// </summary>
        private static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
        {
       bool hasAnimatorChanges = false;

          // 임포트된 에셋 중 AnimatorController 확인
            foreach (string path in importedAssets)
            {
   if (path.EndsWith(".controller"))
      {
      hasAnimatorChanges = true;
           break;
           }
}

   // 삭제된 에셋 중 AnimatorController 확인
       if (!hasAnimatorChanges)
    {
      foreach (string path in deletedAssets)
         {
      if (path.EndsWith(".controller"))
        {
  hasAnimatorChanges = true;
       break;
           }
   }
  }

          if (hasAnimatorChanges)
            {
          GenerateAnimatorParameterConstants();
            }
        }

    /// <summary>
        /// 메뉴에서 수동으로 실행할 수 있는 옵션
        /// </summary>
        [MenuItem("ProjectBS/Tools/Generate Animator Parameter Constants")]
        public static void GenerateAnimatorParameterConstantsMenu()
        {
            GenerateAnimatorParameterConstants();
            Debug.Log("Animator Parameter Constants generated successfully!");
        }

        /// <summary>
        /// 모든 AnimatorController의 파라미터를 수집하고 AnimParamConstants.cs 생성
        /// </summary>
        private static void GenerateAnimatorParameterConstants()
     {
      // 모든 AnimatorController 찾기
string[] guids = AssetDatabase.FindAssets("t:AnimatorController");
            var allParameters = new HashSet<string>();

            foreach (string guid in guids)
            {
     string path = AssetDatabase.GUIDToAssetPath(guid);
  AnimatorController controller = AssetDatabase.LoadAssetAtPath<AnimatorController>(path);

     if (controller != null)
                {
  foreach (var param in controller.parameters)
             {
        if (!string.IsNullOrEmpty(param.name))
 {
            allParameters.Add(param.name);
   }
  }
                }
   }

            // AnimParamConstants.cs 파일 생성/업데이트
        GenerateAnimParamConstantsFile(allParameters);
        }

        /// <summary>
        /// AnimParamConstants.cs 파일 생성
        /// </summary>
        private static void GenerateAnimParamConstantsFile(HashSet<string> parameters)
        {
          StringBuilder fileContent = new StringBuilder();
            
  // 파일 헤더
       fileContent.AppendLine("// Auto-generated file. Do not modify manually.");
fileContent.AppendLine("// This file is automatically generated from AnimatorController assets.");
            fileContent.AppendLine();
            fileContent.AppendLine("namespace BS.Common");
          fileContent.AppendLine("{");
 fileContent.AppendLine("    /// <summary>");
       fileContent.AppendLine(" /// Animator Parameter Constants");
     fileContent.AppendLine("    /// Auto-generated from all AnimatorController assets in the project");
     fileContent.AppendLine("    /// </summary>");
            fileContent.AppendLine("    public static class AnimParamConstants");
    fileContent.AppendLine("    {");

  // 파라미터 상수 생성
      var sortedParams = parameters.OrderBy(p => p).ToList();
       foreach (string param in sortedParams)
     {
   string constName = ConvertToConstantName(param);
         fileContent.AppendLine($"  public const string {constName} = \"{param}\";");
          }

            fileContent.AppendLine("    }");
            fileContent.AppendLine("}");

       // 디렉토리 확인 및 생성
     string directory = Path.GetDirectoryName(ANIM_PARAM_CONSTANTS_FILE_PATH);
         if (!Directory.Exists(directory))
            {
       Directory.CreateDirectory(directory);
            }

            // 파일 쓰기
            File.WriteAllText(ANIM_PARAM_CONSTANTS_FILE_PATH, fileContent.ToString());
  AssetDatabase.Refresh();

          Debug.Log($"Generated AnimParamConstants.cs with {parameters.Count} animator parameter constants");
     }

        /// <summary>
        /// 파라미터 이름을 상수 이름 형식으로 변환
     /// 예: "isRunning" -> "IS_RUNNING", "Speed" -> "SPEED"
        /// </summary>
      private static string ConvertToConstantName(string paramName)
        {
    StringBuilder result = new StringBuilder();

for (int i = 0; i < paramName.Length; i++)
      {
                char c = paramName[i];

         // DESC :: 대문자이고 첫 글자가 아니며 이전 문자가 소문자인 경우 언더스코어 추가
     if (char.IsUpper(c) && i > 0 && char.IsLower(paramName[i - 1]))
  {
                  result.Append('_');
      }

      result.Append(char.ToUpper(c));
          }

     return result.ToString();
      }
    }
}
